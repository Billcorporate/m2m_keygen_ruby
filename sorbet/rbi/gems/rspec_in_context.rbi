# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec_in_context/all/rspec_in_context.rbi
#
# rspec_in_context-1.1.0.3

module RspecInContext
  def self.included(base); end
end
class RspecInContext::NoContextFound < StandardError
end
class RspecInContext::Context < Struct
  def block; end
  def block=(_); end
  def name; end
  def name=(_); end
  def namespace; end
  def namespace=(_); end
  def owner; end
  def owner=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def silent; end
  def silent=(_); end
end
module RspecInContext::InContext
  def self.add_context(context_name, owner = nil, namespace = nil, silent = nil, &block); end
  def self.contexts; end
  def self.find_context(context_name, namespace = nil); end
  def self.find_context_in_any_namespace(context_name); end
  def self.included(base); end
  def self.outside_define_context(context_name, namespace, silent, &block); end
  def self.remove_context(current_class); end
end
module RspecInContext::InContext::ClassMethods
  def define_context(context_name, namespace: nil, ns: nil, silent: nil, print_context: nil, &block); end
  def execute_tests; end
  def in_context(context_name, *args, namespace: nil, ns: nil, &block); end
  def instanciate_context; end
end
module RspecInContext::ContextManagement
  def subclass(parent, description, args, registration_collection, &example_group_block); end
end
module RSpec
  def self.define_context(name, namespace: nil, ns: nil, silent: nil, print_context: nil, &block); end
end
module RSpec::Core
end
class RSpec::Core::ExampleGroup
end
