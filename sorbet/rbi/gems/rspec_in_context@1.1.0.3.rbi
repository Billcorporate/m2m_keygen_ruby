# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec_in_context` gem.
# Please instead update this file by running `bin/tapioca gem rspec_in_context`.

# RSpec
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:17
module RSpec
  class << self
    # Used to ensure examples get reloaded between multiple runs in the same
    # process and ensures user configuration is persisted.
    #
    # Users must invoke this if they want to clear all examples but preserve
    # current configuration when they use the runner multiple times within the
    # same process.
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:70
    def clear_examples; end

    # Returns the global [Configuration](RSpec/Core/Configuration) object. While
    # you _can_ use this method to access the configuration, the more common
    # convention is to use [RSpec.configure](RSpec#configure-class_method).
    #
    # @example
    #   RSpec.configuration.drb_port = 1234
    # @see RSpec.configure
    # @see Core::Configuration
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:85
    def configuration; end

    # Setters for shared global objects
    #
    # @api private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:49
    def configuration=(_arg0); end

    # Yields the global configuration to a block.
    #
    # @example
    #   RSpec.configure do |config|
    #   config.add_formatter 'documentation'
    #   end
    # @see Core::Configuration
    # @yield [Configuration] global configuration
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:97
    def configure; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:194
    def const_missing(name); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def context(*args, &example_group_block); end

    # The example being executed.
    #
    # The primary audience for this method is library authors who need access
    # to the example currently being executed and also want to support all
    # versions of RSpec 2 and 3.
    #
    # @example
    #
    #   RSpec.configure do |c|
    #   # context.example is deprecated, but RSpec.current_example is not
    #   # available until RSpec 3.0.
    #   fetch_current_example = RSpec.respond_to?(:current_example) ?
    #   proc { RSpec.current_example } : proc { |context| context.example }
    #
    #   c.before(:example) do
    #   example = fetch_current_example.call(self)
    #
    #   # ...
    #   end
    #   end
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:122
    def current_example; end

    # Set the current example being executed.
    #
    # @api private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:128
    def current_example=(example); end

    # Get the current RSpec execution scope
    #
    # Returns (in order of lifecycle):
    #   * `:suite` as an initial value, this is outside of the test lifecycle.
    #   * `:before_suite_hook` during `before(:suite)` hooks.
    #   * `:before_context_hook` during `before(:context)` hooks.
    #   * `:before_example_hook` during `before(:example)` hooks and `around(:example)` before `example.run`.
    #   * `:example` within the example run.
    #   * `:after_example_hook` during `after(:example)` hooks and `around(:example)` after `example.run`.
    #   * `:after_context_hook` during `after(:context)` hooks.
    #   * `:after_suite_hook` during `after(:suite)` hooks.
    #   * `:suite` as a final value, again this is outside of the test lifecycle.
    #
    # Reminder, `:context` hooks have `:all` alias and `:example` hooks have `:each` alias.
    #
    # @return [Symbol]
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:154
    def current_scope; end

    # Set the current scope rspec is executing in
    #
    # @api private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:134
    def current_scope=(scope); end

    # Allows you to define contexts outside of RSpec.describe blocks
    #
    # @param name [String, Symbol] Name of the defined context
    # @param namespace [String, Symbol] Namespace where to store your context
    # @param ns Alias of namespace
    # @param silent [Boolean] Does the in_context should wrap itself into a context block with its name
    # @param print_context [Boolean] Reverse alias of silent
    # @param block [Proc] code that will be injected later
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context.rb:27
    def define_context(name, namespace: T.unsafe(nil), ns: T.unsafe(nil), silent: T.unsafe(nil), print_context: T.unsafe(nil), &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def describe(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def example_group(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def fcontext(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def fdescribe(*args, &example_group_block); end

    # Used to ensure examples get reloaded and user configuration gets reset to
    # defaults between multiple runs in the same process.
    #
    # Users must invoke this if they want to have the configuration reset when
    # they use the runner multiple times within the same process. Users must deal
    # themselves with re-configuration of RSpec before run.
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:58
    def reset; end

    # source://rspec-core-3.11.0/lib/rspec/core/shared_example_group.rb:110
    def shared_context(name, *args, &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/shared_example_group.rb:110
    def shared_examples(name, *args, &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/shared_example_group.rb:110
    def shared_examples_for(name, *args, &block); end

    # Internal container for global non-configuration data.
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:160
    def world; end

    # Setters for shared global objects
    #
    # @api private
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:49
    def world=(_arg0); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def xcontext(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/dsl.rb:42
    def xdescribe(*args, &example_group_block); end
  end
end

# Core
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:19
module RSpec::Core
  class << self
    # @private path to executable file.
    #
    # source://rspec-core-3.11.0/lib/rspec/core.rb:181
    def path_to_executable; end
  end
end

# ExampleGroup
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:21
class RSpec::Core::ExampleGroup
  extend ::RspecInContext::ContextManagement

  # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:707
  def initialize(inspect_output = T.unsafe(nil)); end

  # Returns the class or module passed to the `describe` method (or alias).
  # Returns nil if the subject is not a class or module.
  #
  # @example
  #   RSpec.describe Thing do
  #   it "does something" do
  #   described_class == Thing
  #   end
  #   end
  #
  # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:99
  def described_class; end

  # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:713
  def inspect; end

  private

  # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:758
  def method_missing(name, *args, **_arg2); end

  class << self
    # Adds an example to the example group
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:367
    def add_example(example); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:529
    def before_context_ivars; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:466
    def children; end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def context(*args, &example_group_block); end

    # Returns true if a `before(:context)` or `after(:context)`
    # hook is currently executing.
    #
    # @return [Boolean]
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:542
    def currently_executing_a_context_hook?; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:667
    def declaration_locations; end

    # @private
    # @see DSL#describe
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:246
    def define_example_group_method(name, metadata = T.unsafe(nil)); end

    # @example
    #     $1 "does something", :slow, :load_factor => 100 do
    #     end
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:145
    def define_example_method(name, extra_options = T.unsafe(nil)); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:317
    def define_nested_shared_group_method(new_name, report_label = T.unsafe(nil)); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:76
    def delegate_to_metadata(*names); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:460
    def descendant_filtered_examples; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:503
    def descendants; end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def describe(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:78
    def described_class; end

    # @return [String] the current example group description
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:85
    def description; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:700
    def each_instance_variable_for_example(group); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:518
    def ensure_example_groups_are_configured; end

    # Defines an example within a group.
    #
    # @example
    #   example do
    #   end
    #
    #   example "does something" do
    #   end
    #
    #   example "does something", :slow, :uses_js do
    #   end
    #
    #   example "does something", :with => 'additional metadata' do
    #   end
    #
    #   example "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload example
    # @overload example
    # @overload example
    # @overload example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def example(*all_args, &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def example_group(*args, &example_group_block); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:450
    def examples; end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def fcontext(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def fdescribe(*args, &example_group_block); end

    # Shortcut to define an example with `:focus => true`.
    #
    # @example
    #   fexample do
    #   end
    #
    #   fexample "does something" do
    #   end
    #
    #   fexample "does something", :slow, :uses_js do
    #   end
    #
    #   fexample "does something", :with => 'additional metadata' do
    #   end
    #
    #   fexample "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload fexample
    # @overload fexample
    # @overload fexample
    # @overload fexample
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def fexample(*all_args, &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:78
    def file_path; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:455
    def filtered_examples; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:379
    def find_and_eval_shared(label, name, inclusion_location, *args, &customization_block); end

    # Shortcut to define an example with `:focus => true`.
    #
    # @example
    #   fit do
    #   end
    #
    #   fit "does something" do
    #   end
    #
    #   fit "does something", :slow, :uses_js do
    #   end
    #
    #   fit "does something", :with => 'additional metadata' do
    #   end
    #
    #   fit "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload fit
    # @overload fit
    # @overload fit
    # @overload fit
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def fit(*all_args, &block); end

    # Shortcut to define an example with `:focus => true`.
    #
    # @example
    #   focus do
    #   end
    #
    #   focus "does something" do
    #   end
    #
    #   focus "does something", :slow, :uses_js do
    #   end
    #
    #   focus "does something", :with => 'additional metadata' do
    #   end
    #
    #   focus "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload focus
    # @overload focus
    # @overload focus
    # @overload focus
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def focus(*all_args, &block); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:655
    def for_filtered_examples(reporter, &block); end

    # Shortcut to define an example with `:focus => true`.
    #
    # @example
    #   fspecify do
    #   end
    #
    #   fspecify "does something" do
    #   end
    #
    #   fspecify "does something", :slow, :uses_js do
    #   end
    #
    #   fspecify "does something", :with => 'additional metadata' do
    #   end
    #
    #   fspecify "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload fspecify
    # @overload fspecify
    # @overload fspecify
    # @overload fspecify
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def fspecify(*all_args, &block); end

    # @return [String] the unique id of this example group. Pass
    #   this at the command line to re-run this exact example group.
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:675
    def id; end

    # Define a singleton method for the singleton class (remove the method if
    # it's already been defined).
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:40
    def idempotently_define_singleton_method(name, &definition); end

    # Includes shared content mapped to `name` directly in the group in which
    # it is declared, as opposed to `it_behaves_like`, which creates a nested
    # group. If given a block, that block is also eval'd in the current
    # context.
    #
    # @see SharedExampleGroup
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:343
    def include_context(name, *args, &block); end

    # Includes shared content mapped to `name` directly in the group in which
    # it is declared, as opposed to `it_behaves_like`, which creates a nested
    # group. If given a block, that block is also eval'd in the current
    # context.
    #
    # @see SharedExampleGroup
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:353
    def include_examples(name, *args, &block); end

    # Defines an example within a group.
    # This is the primary API to define a code example.
    #
    # @example
    #   it do
    #   end
    #
    #   it "does something" do
    #   end
    #
    #   it "does something", :slow, :uses_js do
    #   end
    #
    #   it "does something", :with => 'additional metadata' do
    #   end
    #
    #   it "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload it
    # @overload it
    # @overload it
    # @overload it
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def it(*all_args, &block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:318
    def it_behaves_like(name, *args, &customization_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:318
    def it_should_behave_like(name, *args, &customization_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:78
    def location; end

    # The [Metadata](Metadata) object associated with this group.
    #
    # @see Metadata
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:51
    def metadata; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:485
    def next_runnable_index_for(file); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:625
    def ordering_strategy; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:508
    def parent_groups; end

    # Shortcut to define an example with `:pending => true`
    #
    # @example
    #   pending do
    #   end
    #
    #   pending "does something" do
    #   end
    #
    #   pending "does something", :slow, :uses_js do
    #   end
    #
    #   pending "does something", :with => 'additional metadata' do
    #   end
    #
    #   pending "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload pending
    # @overload pending
    # @overload pending
    # @overload pending
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def pending(*all_args, &block); end

    # Removes an example from the example group
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:373
    def remove_example(example); end

    # Clear memoized values when adding/removing examples
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:359
    def reset_memoized; end

    # Runs all the examples in this group.
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:599
    def run(reporter = T.unsafe(nil)); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:585
    def run_after_context_hooks(example_group_instance); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:547
    def run_before_context_hooks(example_group_instance); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:641
    def run_examples(reporter); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:410
    def set_it_up(description, args, registration_collection, &example_group_block); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:685
    def set_ivars(instance, ivars); end

    # Shortcut to define an example with `:skip => true`
    #
    # @example
    #   skip do
    #   end
    #
    #   skip "does something" do
    #   end
    #
    #   skip "does something", :slow, :uses_js do
    #   end
    #
    #   skip "does something", :with => 'additional metadata' do
    #   end
    #
    #   skip "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload skip
    # @overload skip
    # @overload skip
    # @overload skip
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def skip(*all_args, &block); end

    # Defines an example within a group.
    # Useful for when your docstring does not read well off of `it`.
    #
    # @example
    #   RSpec.describe MyClass do
    #   specify "#do_something is deprecated" do
    #   # ...
    #   end
    #   end
    # @example
    #   specify do
    #   end
    #
    #   specify "does something" do
    #   end
    #
    #   specify "does something", :slow, :uses_js do
    #   end
    #
    #   specify "does something", :with => 'additional metadata' do
    #   end
    #
    #   specify "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload specify
    # @overload specify
    # @overload specify
    # @overload specify
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def specify(*all_args, &block); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:534
    def store_before_context_ivars(example_group_instance); end

    # @private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:9
    def subclass(parent, description, args, registration_collection, &example_group_block); end

    # :nocov:
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:562
    def superclass_before_context_ivars; end

    # @private
    # @return [Metadata] belonging to the parent of a nested {ExampleGroup}
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:71
    def superclass_metadata; end

    # @private
    # @return [Boolean]
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:513
    def top_level?; end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:680
    def top_level_description; end

    # Traverses the tree of groups, starting with `self`, then the children, recursively.
    # Halts the traversal of a branch of the tree as soon as the passed block returns true.
    # Note that siblings groups and their sub-trees will continue to be explored.
    # This is intended to make it easy to find the top-most group that satisfies some
    # condition.
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:476
    def traverse_tree_until(&block); end

    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:727
    def update_inherited_metadata(updates); end

    # Temporarily replace the provided metadata.
    # Intended primarily to allow an example group's singleton class
    # to return the metadata of the example that it exists for. This
    # is necessary for shared example group inclusion to work properly
    # with singleton example groups.
    #
    # @private
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:61
    def with_replaced_metadata(meta); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def xcontext(*args, &example_group_block); end

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:247
    def xdescribe(*args, &example_group_block); end

    # Shortcut to define an example with `:skip => 'Temporarily skipped with xexample'`.
    #
    # @example
    #   xexample do
    #   end
    #
    #   xexample "does something" do
    #   end
    #
    #   xexample "does something", :slow, :uses_js do
    #   end
    #
    #   xexample "does something", :with => 'additional metadata' do
    #   end
    #
    #   xexample "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload xexample
    # @overload xexample
    # @overload xexample
    # @overload xexample
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def xexample(*all_args, &block); end

    # Shortcut to define an example with `:skip => 'Temporarily skipped with xit'`.
    #
    # @example
    #   xit do
    #   end
    #
    #   xit "does something" do
    #   end
    #
    #   xit "does something", :slow, :uses_js do
    #   end
    #
    #   xit "does something", :with => 'additional metadata' do
    #   end
    #
    #   xit "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload xit
    # @overload xit
    # @overload xit
    # @overload xit
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def xit(*all_args, &block); end

    # Shortcut to define an example with `:skip => 'Temporarily skipped with xspecify'`.
    #
    # @example
    #   xspecify do
    #   end
    #
    #   xspecify "does something" do
    #   end
    #
    #   xspecify "does something", :slow, :uses_js do
    #   end
    #
    #   xspecify "does something", :with => 'additional metadata' do
    #   end
    #
    #   xspecify "does something" do |ex|
    #   # ex is the Example object that contains metadata about the example
    #   end
    # @overload xspecify
    # @overload xspecify
    # @overload xspecify
    # @overload xspecify
    # @see example
    # @yield [Example] the example object
    #
    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:146
    def xspecify(*all_args, &block); end

    private

    # source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:742
    def method_missing(name, *args); end
  end
end

# @private
#
# source://rspec-core-3.11.0/lib/rspec/core/example_group.rb:696
RSpec::Core::ExampleGroup::INSTANCE_VARIABLE_TO_IGNORE = T.let(T.unsafe(nil), Symbol)

# @private
#
# source://rspec-core-3.11.0/lib/rspec/core/filter_manager.rb:183
RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

# @private
#
# source://rspec-core-3.11.0/lib/rspec/core.rb:187
RSpec::MODULES_TO_AUTOLOAD = T.let(T.unsafe(nil), Hash)

# @private
#
# source://rspec-core-3.11.0/lib/rspec/core/shared_context.rb:54
RSpec::SharedContext = RSpec::Core::SharedContext

# Main wrapping module
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/version.rb:3
module RspecInContext
  include ::RspecInContext::InContext

  mixes_in_class_methods ::RspecInContext::InContext::ClassMethods

  class << self
    # Inclusion convenience of the gem in RSpec
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context.rb:12
    def included(base); end
  end
end

# Context struct
#
# @attr block [Proc] what will be executed in the test context
# @attr owner [Class] current rspec context class. This will be used to know where a define_context has been defined
# @attr name [String | Symbol] represent the name by which the context can be find.
# @attr namespace [String | Symbol] namespace for context names to avoid collisions
# @attr silent [Boolean] does the in_context wrap itself into a context with its name or an anonymous context
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:14
class RspecInContext::Context < ::Struct
  # what will be executed in the test context
  #
  # @return [Proc] the current value of block
  def block; end

  # what will be executed in the test context
  #
  # @param value [Proc] the value to set the attribute block to.
  # @return [Proc] the newly set value
  def block=(_); end

  # represent the name by which the context can be find.
  #
  # @return [String | Symbol] the current value of name
  def name; end

  # represent the name by which the context can be find.
  #
  # @param value [String | Symbol] the value to set the attribute name to.
  # @return [String | Symbol] the newly set value
  def name=(_); end

  # namespace for context names to avoid collisions
  #
  # @return [String | Symbol] the current value of namespace
  def namespace; end

  # namespace for context names to avoid collisions
  #
  # @param value [String | Symbol] the value to set the attribute namespace to.
  # @return [String | Symbol] the newly set value
  def namespace=(_); end

  # current rspec context class. This will be used to know where a define_context has been defined
  #
  # @return [Class] the current value of owner
  def owner; end

  # current rspec context class. This will be used to know where a define_context has been defined
  #
  # @param value [Class] the value to set the attribute owner to.
  # @return [Class] the newly set value
  def owner=(_); end

  # does the in_context wrap itself into a context with its name or an anonymous context
  #
  # @return [Boolean] the current value of silent
  def silent; end

  # does the in_context wrap itself into a context with its name or an anonymous context
  #
  # @param value [Boolean] the value to set the attribute silent to.
  # @return [Boolean] the newly set value
  def silent=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Allow context to be scoped inside a block
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:5
module RspecInContext::ContextManagement
  # prepending a RSpec method so we can know when a describe/context block finish
  # its reading
  #
  # @api private
  #
  # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/context_management.rb:9
  def subclass(parent, description, args, registration_collection, &example_group_block); end
end

# Main module containing almost every methods
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:17
module RspecInContext::InContext
  mixes_in_class_methods ::RspecInContext::InContext::ClassMethods

  class << self
    # Meta method to add a new context
    #
    # @api private
    # @note Will warn if a context is overriden
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:37
    def add_context(context_name, owner = T.unsafe(nil), namespace = T.unsafe(nil), silent = T.unsafe(nil), &block); end

    # Contexts container + creation
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:29
    def contexts; end

    # Find a context.
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:45
    def find_context(context_name, namespace = T.unsafe(nil)); end

    # Look into every namespace to find the context
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:55
    def find_context_in_any_namespace(context_name); end

    # Hook for easier inclusion of the gem in RSpec
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:23
    def included(base); end

    # Define a context from outside a RSpec.describe block
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:70
    def outside_define_context(context_name, namespace, silent, &block); end

    # Delete a context
    #
    # @api private
    #
    # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:62
    def remove_context(current_class); end
  end
end

# This module define the methods that will be available for the end user inside RSpec tests
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:76
module RspecInContext::InContext::ClassMethods
  # Let you define a context that can be reused later
  #
  # @note contexts are scoped to the block they are defined in.
  # @param context_name [String, Symbol] The name of the context that will be re-used later
  # @param namespace [String, Symbol] namespace name where the context will be stored.
  #   It helps reducing colisions when you define "global" contexts
  # @param ns [String, Symbol] Alias of namespace
  # @param block [Proc] Contain the code that will be injected with #in_context later
  # @param silent [Boolean] Does the in_context wrap itself into a context with its name or an anonymous context
  # @param print_context [Boolean] Reverse alias of silent
  #
  # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:114
  def define_context(context_name, namespace: T.unsafe(nil), ns: T.unsafe(nil), silent: T.unsafe(nil), print_context: T.unsafe(nil), &block); end

  # Used in context definition
  # Place where you want to re-inject code passed in argument of in_context
  #
  # For convenience and readability, a `instanciate_context` alias have been defined
  # (for more examples look at tests)
  #
  # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:98
  def execute_tests; end

  # Use a context and inject its content at this place in the code
  #
  # @param context_name [String, Symbol] The context namespace
  # @param args [*Any] Any arg to be passed down to the injected context
  # @param namespace [String, Symbol] namespace name where to look for the context
  # @param ns [String, Symbol] Alias for :namespace
  # @param block Content that will be re-injected (see #execute_tests)
  #
  # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:84
  def in_context(context_name, *args, namespace: T.unsafe(nil), ns: T.unsafe(nil), &block); end

  # Used in context definition
  # Place where you want to re-inject code passed in argument of in_context
  #
  # For convenience and readability, a `instanciate_context` alias have been defined
  # (for more examples look at tests)
  #
  # source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:98
  def instanciate_context; end
end

# Name of the Global context
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:19
RspecInContext::InContext::GLOBAL_CONTEXT = T.let(T.unsafe(nil), Symbol)

# Error type when no context is find from its name (and eventualy namespace)
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/in_context.rb:6
class RspecInContext::NoContextFound < ::StandardError; end

# Version of the gem
#
# source://rspec_in_context-1.1.0.3/lib/rspec_in_context/version.rb:5
RspecInContext::VERSION = T.let(T.unsafe(nil), String)
