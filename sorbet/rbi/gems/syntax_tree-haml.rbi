# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/syntax_tree-haml/all/syntax_tree-haml.rbi
#
# syntax_tree-haml-1.3.1

module SyntaxTree
end
module SyntaxTree::Haml
  def self.format(source, maxwidth = nil); end
  def self.parse(source); end
  def self.read(filepath); end
end
class SyntaxTree::Haml::Format < SyntaxTree::Haml::Visitor
  def continuation?(node, child); end
  def escaped?(text); end
  def initialize(q); end
  def parse_attributes(source); end
  def q; end
  def visit_comment(node); end
  def visit_doctype(node); end
  def visit_filter(node); end
  def visit_haml_comment(node); end
  def visit_plain(node); end
  def visit_root(node); end
  def visit_script(node); end
  def visit_silent_script(node); end
  def visit_tag(node); end
  def with_children(node); end
end
class SyntaxTree::Haml::Format::LiteralHashValue < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class SyntaxTree::Haml::Format::StringHashValue < Struct
  def quote; end
  def quote=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class SyntaxTree::Haml::Format::PartList
  def <<(part); end
  def empty?; end
  def format(q); end
  def initialize(node); end
  def node; end
  def parts; end
end
class Anonymous_Struct_6 < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class SyntaxTree::Haml::Format::PlainPart < Anonymous_Struct_6
  def format(q, align); end
  def length; end
end
class Anonymous_Struct_7 < Struct
  def prefix; end
  def prefix=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class SyntaxTree::Haml::Format::PrefixPart < Anonymous_Struct_7
  def format(q, align); end
  def length; end
end
class SyntaxTree::Haml::Format::HTMLAttributesPart
  def format(q, align); end
  def initialize(raw); end
  def length; end
  def values; end
end
class Anonymous_Struct_8 < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def values; end
  def values=(_); end
end
class SyntaxTree::Haml::Format::HashAttributesPart < Anonymous_Struct_8
  def format(q, align); end
  def format_value(q, hash, level = nil); end
  def length; end
end
class SyntaxTree::Haml::PrettyPrint < SyntaxTree::Haml::Visitor
  def bool_field(name); end
  def group(name); end
  def initialize(q); end
  def pp_field(name, value); end
  def q; end
  def text_field(name, value); end
  def visit_comment(node); end
  def visit_doctype(node); end
  def visit_filter(node); end
  def visit_haml_comment(node); end
  def visit_plain(node); end
  def visit_root(node); end
  def visit_script(node); end
  def visit_silent_script(node); end
  def visit_tag(node); end
end
class SyntaxTree::Haml::Visitor
  def visit(node); end
end
class Haml::Parser::ParseNode < Struct
  def accept(visitor); end
  def format(q); end
  def pretty_print(q); end
end
