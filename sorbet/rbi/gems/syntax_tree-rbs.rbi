# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/syntax_tree-rbs/all/syntax_tree-rbs.rbi
#
# syntax_tree-rbs-0.5.0

module ShimVisibility
  def visibility; end
end
module RBS::AST::Members
end
module SyntaxTree
end
module SyntaxTree::RBS
  def self.format(source, maxwidth = nil); end
  def self.parse(source); end
  def self.read(filepath); end
end
module SyntaxTree::RBS::Entrypoints
  def format(q); end
  def pretty_print(q); end
end
class SyntaxTree::RBS::Root
  def accept(visitor); end
  def declarations; end
  def initialize(declarations); end
  include SyntaxTree::RBS::Entrypoints
end
module RBS
end
class RBS::TypeName
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
module RBS::AST
end
module RBS::AST::Declarations
end
class RBS::AST::Declarations::Base
  include SyntaxTree::RBS::Entrypoints
end
class RBS::AST::Declarations::Alias < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Declarations::Class < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Declarations::Constant < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Declarations::Global < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Declarations::Interface < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Declarations::Module < RBS::AST::Declarations::Base
  def accept(visitor); end
end
class RBS::AST::Members::Base
  include SyntaxTree::RBS::Entrypoints
end
class RBS::AST::Members::Alias < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::AttrAccessor < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::AttrReader < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::AttrWriter < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::ClassInstanceVariable < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::ClassVariable < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::Extend < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::Include < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::InstanceVariable < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::MethodDefinition < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::Prepend < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::Private < RBS::AST::Members::Base
  def accept(visitor); end
end
class RBS::AST::Members::Public < RBS::AST::Members::Base
  def accept(visitor); end
end
module RBS::Types
end
class RBS::Types::Alias
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Any < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Bool < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Bottom < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Class < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Instance < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Nil < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Self < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Top < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Bases::Void < RBS::Types::Bases::Base
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::ClassInstance
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::ClassSingleton
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Function::Param
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Interface
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Intersection
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Literal
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Optional
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Proc
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Record
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Tuple
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Union
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class RBS::Types::Variable
  def accept(visitor); end
  include SyntaxTree::RBS::Entrypoints
end
class SyntaxTree::RBS::Format < SyntaxTree::RBS::Visitor
  def initialize(q); end
  def print_annotations(node); end
  def print_attribute(type, node); end
  def print_comment(node); end
  def print_members(node); end
  def print_method_signature(node); end
  def print_name_and_args(node); end
  def print_name_and_type_params(node); end
  def q; end
  def visit_alias_declaration(node); end
  def visit_alias_member(node); end
  def visit_alias_type(node); end
  def visit_any_type(node); end
  def visit_attr_accessor_member(node); end
  def visit_attr_reader_member(node); end
  def visit_attr_writer_member(node); end
  def visit_base_type(node); end
  def visit_bool_type(node); end
  def visit_bottom_type(node); end
  def visit_class_declaration(node); end
  def visit_class_instance_type(node); end
  def visit_class_instance_variable_member(node); end
  def visit_class_singleton_type(node); end
  def visit_class_type(node); end
  def visit_class_variable_member(node); end
  def visit_constant_declaration(node); end
  def visit_extend_member(node); end
  def visit_function_param_type(node); end
  def visit_global_declaration(node); end
  def visit_include_member(node); end
  def visit_instance_type(node); end
  def visit_instance_variable_member(node); end
  def visit_interface_declaration(node); end
  def visit_interface_type(node); end
  def visit_intersection_type(node); end
  def visit_literal_type(node); end
  def visit_method_definition_member(node); end
  def visit_module_declaration(node); end
  def visit_nil_type(node); end
  def visit_optional_type(node); end
  def visit_prepend_member(node); end
  def visit_private_member(node); end
  def visit_proc_type(node); end
  def visit_public_member(node); end
  def visit_record_type(node); end
  def visit_root(node); end
  def visit_self_type(node); end
  def visit_top_type(node); end
  def visit_tuple_type(node); end
  def visit_type_name(node); end
  def visit_union_type(node); end
  def visit_variable_type(node); end
  def visit_void_type(node); end
end
class SyntaxTree::RBS::PrettyPrint < SyntaxTree::RBS::Visitor
  def bool_field(name); end
  def group(name); end
  def initialize(q); end
  def pp_field(name, field); end
  def print_annotations(node); end
  def print_attribute(node); end
  def print_comment(node); end
  def print_method_signature(node); end
  def print_name_and_args(node); end
  def print_name_and_type_params(node); end
  def q; end
  def visit_alias_declaration(node); end
  def visit_alias_member(node); end
  def visit_alias_type(node); end
  def visit_any_type(node); end
  def visit_attr_accessor_member(node); end
  def visit_attr_reader_member(node); end
  def visit_attr_writer_member(node); end
  def visit_base_type(node); end
  def visit_bool_type(node); end
  def visit_bottom_type(node); end
  def visit_class_declaration(node); end
  def visit_class_instance_type(node); end
  def visit_class_instance_variable_member(node); end
  def visit_class_singleton_type(node); end
  def visit_class_type(node); end
  def visit_class_variable_member(node); end
  def visit_constant_declaration(node); end
  def visit_extend_member(node); end
  def visit_field(name, field); end
  def visit_function_param_type(node); end
  def visit_global_declaration(node); end
  def visit_include_member(node); end
  def visit_instance_type(node); end
  def visit_instance_variable_member(node); end
  def visit_interface_declaration(node); end
  def visit_interface_type(node); end
  def visit_intersection_type(node); end
  def visit_literal_type(node); end
  def visit_method_definition_member(node); end
  def visit_module_declaration(node); end
  def visit_nil_type(node); end
  def visit_optional_type(node); end
  def visit_prepend_member(node); end
  def visit_private_member(node); end
  def visit_proc_type(node); end
  def visit_public_member(node); end
  def visit_record_type(node); end
  def visit_root(node); end
  def visit_self_type(node); end
  def visit_top_type(node); end
  def visit_tuple_type(node); end
  def visit_type_name(node); end
  def visit_union_type(node); end
  def visit_variable_type(node); end
  def visit_void_type(node); end
end
class SyntaxTree::RBS::Visitor
  def visit(node); end
end
class SyntaxTree::RBS::Formatter < PrettierPrint
  def force_parens; end
  def force_parens?; end
  def initialize(source, *, **, &); end
  def source; end
end
